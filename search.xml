<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang实现一个冒泡算法</title>
    <url>/2020/04/20/golang-bubbling/</url>
    <content><![CDATA[<blockquote>
<p>序言<br>闲来无聊手撸一个冒泡玩玩</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="go">package main

import &quot;fmt&quot;

var arr  = []int{12,14,78,56,98,34,7,4,1,1}

//冒泡
func main()  {
    for i := range arr {
        for j := range arr {
            if arr[i] &lt; arr[j] {
                tmp := arr[j]
                arr[j] = arr[i]
                arr[i] = tmp
            }
        }
    }
    fmt.Println(arr)
}</code></pre>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>golang vender的使用</title>
    <url>/2020/04/18/golang-vender/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们有个项目引入了各种包,每次部署的时候是不是都很烦<br>新人独白:天哪!这么多包下载到什么时候!要炸了<del>~</del><br>别怕go自带的vendor帮你解决这个问题</p>
<h2 id="老项目引入mod-vendor"><a href="#老项目引入mod-vendor" class="headerlink" title="老项目引入mod vendor"></a>老项目引入mod vendor</h2><p>还是我们的test项目<br><img src="https://upload-images.jianshu.io/upload_images/22774927-ffe8d57c6ce1384e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"><br>在我们的main.go文件引入gin框架的包<br><img src="https://upload-images.jianshu.io/upload_images/22774927-9297aef34622dfa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引入gin包"><br>上面我只是做演示所以并没有真正去使用这个包<br>在项目test目录下执行go mod vendor<br><img src="https://upload-images.jianshu.io/upload_images/22774927-7ca86977e4d44621.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"><br>现在我们的目录下就多了vendor目录及go.sum文件</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>vendor下面是我们依赖的包,结构如下<br><img src="https://upload-images.jianshu.io/upload_images/22774927-00e353aa80206a99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vendor目录结构"><br>go.sum是导入包的信息<br><img src="https://upload-images.jianshu.io/upload_images/22774927-02ef6ee2d50467b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="go sum内容"><br>这里我只截取了部分演示</p>
<h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>好了,后面我们就可以把vendor和go.sum都添加进我们的代码仓库里面,再也不用担心每次都下载一大堆包了</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>vender</tag>
      </tags>
  </entry>
  <entry>
    <title>golang实现一个简单的webserver</title>
    <url>/2020/04/21/golang-web-server/</url>
    <content><![CDATA[<h2 id="官网DEMO"><a href="#官网DEMO" class="headerlink" title="官网DEMO"></a>官网DEMO</h2><blockquote>
<p>先上一个官网的示例<br>简单几行代码即可实现一个webserver</p>
</blockquote>
<pre><code class="go">package main

import (
    &quot;io&quot;
    &quot;log&quot;
    &quot;net/http&quot;
)

func main() {
    // Hello world, the web server

    helloHandler := func(w http.ResponseWriter, req *http.Request) {
        io.WriteString(w, &quot;Hello, world!\n&quot;)
    }

    http.HandleFunc(&quot;/hello&quot;, helloHandler)
    log.Fatal(http.ListenAndServe(&quot;:8080&quot;, nil))
}</code></pre>
<h2 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h2><blockquote>
<p>进阶版我们封装了以下功能</p>
<ul>
<li>用一个gin框架</li>
<li>实现一个route</li>
<li>实现controller</li>
<li>实现一个中间件</li>
<li>加一个单测<br>代码如下</li>
</ul>
</blockquote>
<pre><code class="go">//main.go
package main

import (
    routes &quot;api/routes&quot;

    &quot;github.com/gin-gonic/gin&quot;
)

func main() {
    r := gin.Default()
    route := routes.Router(r)
    route.Run(&quot;:8080&quot;)
}

//单测示例,其实并没用
func hello() string {
    return &quot;hello&quot;
}</code></pre>
<pre><code class="go">// routes/route.go
package routes

import (
    c &quot;api/controller&quot;
    m &quot;api/middleware&quot;

    &quot;github.com/gin-gonic/gin&quot;
)

func Router(r *gin.Engine) *gin.Engine {
    r.Use(m.SetHeader())
    //路由组,很方便
    v1 := r.Group(&quot;/v1&quot;)
    {
        //访问地址 http://hostname/v1/hello
        v1.GET(&quot;/hello&quot;, c.Hello)
    }
    return r
}</code></pre>
<pre><code class="go">// controller/hello.go
package controller

import (
    &quot;github.com/gin-gonic/gin&quot;
)

type Hello struct {
    Text  string `json:&quot;text&quot;`
}

//golang 的方法首字母大写表示public修饰符
func Hello(c *gin.Context) {
    data := Hello{
        text: &quot;hello word&quot;
    }
    //返回json信息
    c.JSON(200, gin.H{
        &quot;data&quot;: data,
    })
}</code></pre>
<pre><code class="go">// middleware/header.go
package middleware

import (
    &quot;github.com/gin-gonic/gin&quot;
)

//简单的跨域中间件
func SetHeader() gin.HandlerFunc {
    return func(c *gin.Context) {
        // gin设置响应头，设置跨域
        c.Header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;)
        c.Header(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, PUT, DELETE&quot;)
        c.Header(&quot;Access-Control-Allow-Headers&quot;, &quot;Action, Module, X-PINGOTHER, Content-Type, Content-Disposition&quot;)
        c.Set(&quot;content-type&quot;, &quot;application/json&quot;)
        c.Next()
    }
}
</code></pre>
<pre><code class="go">// main_test.go 单测示例
package main

import &quot;testing&quot;

func TestHello(t *testing.T) {
    if hello() != &quot;hello&quot; {
        t.Error(&quot;Testing error&quot;)
    }
}</code></pre>
<blockquote>
<p>好了,一个简单的webserver就搞定了<br>所有示例都是go module模式下的,不会的同学可以看我其他文章有介绍</p>
</blockquote>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>github + drone自动化部署</title>
    <url>/2020/04/18/golang/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多同学用github管理我们的代码,下面介绍下怎么用github+drone搭建自己的持续集成服务</p>
<h2 id="申请oauth"><a href="#申请oauth" class="headerlink" title="申请oauth"></a>申请oauth</h2><p>因为我们需要依赖github的oauth服务,先申请一个Client Id和Client Secret:<br>申请页面位于github-&gt;setting-&gt;Developer settings-&gt;OAuth Apps<br><img src="https://upload-images.jianshu.io/upload_images/22774927-a73a71a41a689443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="申请oauth页面"><br>提交完毕,我们就可以得到Client Id和Client Secret:<br><img src="https://upload-images.jianshu.io/upload_images/22774927-d3ae094458479a2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="申请结果页"></p>
<h2 id="编写docker-compose"><a href="#编写docker-compose" class="headerlink" title="编写docker-compose"></a>编写docker-compose</h2><p>接下来创建一个docker-compose.yml文件内容如下:</p>
<pre><code class="yaml">version: &#39;2&#39;
services:
  drone-server:
    image: drone/drone:1
    container_name: drone-server
    ports:
      - &#39;10081:80&#39;      # Web管理面板的入口 PROTO=http  时使用该端口
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock   # docker.sock [1]
      - /var/data/drone/:/var/lib/drone             # drone数据存放路径
    environment:
      - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}  #上面申请的github CLIENT_ID
      - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}#上面申请的github CLIENT_SECRET
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}   #你的密钥MD5值即可
      - DRONE_SERVER_HOST=你的IP:10081
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO} #http 或 https  
      - TZ=Asia/Shanghai
    restart: always
  drone-agent:
    image: drone/drone-runner-docker:1
    container_name: drone-runner
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # docker.sock [1]
    environment:
      - DRONE_RPC_PROTO=${DRONE_SERVER_PROTO} #http 或 https
      - DRONE_RPC_HOST=你的IP:10081
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET} #你的密钥MD5值即可,跟上面的保持一致
      - DRONE_RUNNER_CAPACITY=2 #最多同时运行几个
      - DRONE_RUNNER_NAME=你的IP
      - TZ=Asia/Shanghai
    restart: always</code></pre>
<p>当前目录下执行docker-compose up -d就可以启动了.<br><img src="https://upload-images.jianshu.io/upload_images/22774927-ff15ddc62e6c03a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动docker-compose"><br>访问我们的主页你的ip:10081,效果如图<br><img src="https://upload-images.jianshu.io/upload_images/22774927-fb4254c911fe9823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目列表"><br><img src="https://upload-images.jianshu.io/upload_images/22774927-7548f78948808524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置信息"></p>
<h2 id="编写-drone-yml"><a href="#编写-drone-yml" class="headerlink" title="编写.drone.yml"></a>编写.drone.yml</h2><p>上图可以看到需要开启自动集成的项目还需要编写.drone.yml文件</p>
<pre><code class="yaml">---
kind: pipeline
type: docker
name: api-ui
workspace:
  base: /data/service
  path: .
steps:
- name: 部署api-ui项目
  image: appleboy/drone-ssh
  settings:
    host:
      from_secret: host
    port: 22
    username:
      from_secret: ssh_name
    password:
      from_secret: ssh_passwd
    script:
      - cd /home/xxxxxx/www/api-ui/
      - pwd &amp;&amp; ls -l
      - git pull origin master
      - rm -rf dist/*
      - cnpm run build
      - pwd &amp;&amp; ls -l
      - docker build -t api-ui:v1 .
      - docker rm -f api-ui || true
      - docker run -d --rm --name api-ui -p 80:80 api-ui:v1</code></pre>
<p>上面的from_secret后面的值可以在我们的setting页面添加<br><img src="https://upload-images.jianshu.io/upload_images/22774927-9196b5e02ca7cf6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="加密内容"><br>设置完毕,我们后续提交代码的时候就会自动同步到我们的服务器了,是不是很方便呢<br><img src="https://upload-images.jianshu.io/upload_images/22774927-06e27c220914bc27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>drone</tag>
      </tags>
  </entry>
  <entry>
    <title>老项目加入golang mod模式</title>
    <url>/2020/04/18/old-add-golang-mod/</url>
    <content><![CDATA[<h2 id="老项目如何迁移至mod"><a href="#老项目如何迁移至mod" class="headerlink" title="老项目如何迁移至mod"></a>老项目如何迁移至mod</h2><p>现在我们有一个老项目test,结构如下<br><img src="https://upload-images.jianshu.io/upload_images/22774927-c978a805c84d703e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"><br>很显然这不是一个mod项目,下面我们将演示如何将它转变为mod</p>
<h2 id="初始化mod"><a href="#初始化mod" class="headerlink" title="初始化mod"></a>初始化mod</h2><p>在我的项目test目录下执行go mod init test (注意:test改成你自己的项目名称即可)<br><img src="https://upload-images.jianshu.io/upload_images/22774927-037a99896a1277e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化mod"><br>如上图,我们的项目目录下就会生成go.mod文件,内容如下</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://upload-images.jianshu.io/upload_images/22774927-1ced8fa28b5e52e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="go mod内容"><br>现在我们就将项目加入mod模式了</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>pre-commit 使用备忘</title>
    <url>/2021/01/08/pre-commit-mark/</url>
    <content><![CDATA[<h1 id="php篇"><a href="#php篇" class="headerlink" title="php篇"></a>php篇</h1><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>文件名</th>
<th>.pre-commit-config.yaml</th>
</tr>
</thead>
<tbody><tr>
<td>路径</td>
<td>cd $HOME</td>
</tr>
</tbody></table>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><pre><code class="yaml">repos:
 - repo: https://github.com/pre-commit/pre-commit-hooks
   rev: v3.4.0
   hooks:
   - id: check-yaml
   - id: check-json
 - repo: https://github.com/digitalpulp/pre-commit-php.git
   rev: 1.4.0
   hooks:
   - id: php-lint-all
     files: \.(php)$
 - repo: https://gitlab.com/PyCQA/flake8
   rev: 3.8.4
   hooks:
   - id: flake8</code></pre>
<h3 id="配置alias"><a href="#配置alias" class="headerlink" title="配置alias"></a>配置alias</h3><blockquote>
<p>alias pre=”pre-commit run –config ${HOME}/.pre-commit-config.yaml”</p>
</blockquote>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre><code class="bash">#将修改添加到暂存区
git add .
#执行校验该步骤将会执行hook
pre
#校验通过再进行commit
git commit --amend</code></pre>
<h3 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h3><p>参考文档：<a href="https://pre-commit.com/" target="_blank" rel="noopener">pre-commit</a></p>
<!-- 标记 -->
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>pre-commit</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode必备扩展介绍</title>
    <url>/2020/04/19/vscode-ext-info/</url>
    <content><![CDATA[<h2 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h2><p>中文语言菜单，不多说，你懂的</p>
<h2 id="GitLens-—-Git-supercharged"><a href="#GitLens-—-Git-supercharged" class="headerlink" title="GitLens — Git supercharged"></a>GitLens — Git supercharged</h2><p>git工具</p>
<h2 id="remote-Develop"><a href="#remote-Develop" class="headerlink" title="remote Develop"></a>remote Develop</h2><p>微软出品，远程开发利器</p>
<h2 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h2><p>同步vscode设置到远程，一键同步远程设置</p>
<h2 id="Better-Align"><a href="#Better-Align" class="headerlink" title="Better Align"></a>Better Align</h2><p>格式化代码神器</p>
<h2 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h2><p>个性化图标</p>
<h2 id="Markdown-Preview"><a href="#Markdown-Preview" class="headerlink" title="Markdown Preview"></a>Markdown Preview</h2><p>写Markdown神器，所见即所得</p>
<h2 id="Sftp"><a href="#Sftp" class="headerlink" title="Sftp"></a>Sftp</h2><p>Sftp工具，喜欢ftp的同学有福了</p>
<h2 id="PHP-DocBlocker"><a href="#PHP-DocBlocker" class="headerlink" title="PHP DocBlocker"></a>PHP DocBlocker</h2><p>一键生成注释，注释党必备</p>
<blockquote>
<p>其他<br>…后续再补</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>php项目中使用composer</title>
    <url>/2020/04/30/php-use-composer/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>需已安装composer,未安装的请自行百度</p>
</blockquote>
<h2 id="编写composer"><a href="#编写composer" class="headerlink" title="编写composer"></a>编写composer</h2><blockquote>
<p>编写composer.json 引入monolog处理日志<br>这里由于我使用的php7.0x,所以引用的monolog-1.x版本的,版本2.x需要php7.2,按需选择即可</p>
</blockquote>
<pre><code class="json">{
    &quot;require&quot;: {
        &quot;monolog/monolog&quot;: &quot;1.*&quot;
    },
    &quot;repositories&quot;: {}
}</code></pre>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>保存composer.json文件<br>执行composer install<br>结果如下</p>
</blockquote>
<pre><code>Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 1 install, 0 updates, 0 removals
  - Installing monolog/monolog (1.25.3): Downloading (100%)</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>编写index.php</p>
</blockquote>
<pre><code class="php">require __DIR__.&#39;/../vendor/autoload.php&#39;;


use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\FirePHPHandler;

$logger = new Logger(&#39;test_logger&#39;);

$logger-&gt;pushHandler(
    new StreamHandler(__DIR__.&#39;/../log/test.log&#39;, Logger::DEBUG)
);
$logger-&gt;pushHandler(new FirePHPHandler());
$logger-&gt;info(&#39;hello log!&#39;);</code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>大家可以看一看自己的日志是不是记下来了呢<br>有其他问题记得联系我</p>
</blockquote>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
</search>
