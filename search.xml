<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang实现一个冒泡算法</title>
    <url>/2020/04/20/golang-bubbling/</url>
    <content><![CDATA[<blockquote>
<p>序言<br>闲来无聊手撸一个冒泡玩玩</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">var</span> arr  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//冒泡</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>
                tmp <span class="token operator">:=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>golang vender的使用</title>
    <url>/2020/04/18/golang-vender/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们有个项目引入了各种包,每次部署的时候是不是都很烦<br>新人独白:天哪!这么多包下载到什么时候!要炸了<del>~</del><br>别怕go自带的vendor帮你解决这个问题</p>
<h2 id="老项目引入mod-vendor"><a href="#老项目引入mod-vendor" class="headerlink" title="老项目引入mod vendor"></a>老项目引入mod vendor</h2><p>还是我们的test项目<br><img src="https://upload-images.jianshu.io/upload_images/22774927-ffe8d57c6ce1384e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"><br>在我们的main.go文件引入gin框架的包<br><img src="https://upload-images.jianshu.io/upload_images/22774927-9297aef34622dfa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引入gin包"><br>上面我只是做演示所以并没有真正去使用这个包<br>在项目test目录下执行go mod vendor<br><img src="https://upload-images.jianshu.io/upload_images/22774927-7ca86977e4d44621.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"><br>现在我们的目录下就多了vendor目录及go.sum文件</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>vendor下面是我们依赖的包,结构如下<br><img src="https://upload-images.jianshu.io/upload_images/22774927-00e353aa80206a99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vendor目录结构"><br>go.sum是导入包的信息<br><img src="https://upload-images.jianshu.io/upload_images/22774927-02ef6ee2d50467b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="go sum内容"><br>这里我只截取了部分演示</p>
<h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>好了,后面我们就可以把vendor和go.sum都添加进我们的代码仓库里面,再也不用担心每次都下载一大堆包了</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>vender</tag>
      </tags>
  </entry>
  <entry>
    <title>github + drone自动化部署</title>
    <url>/2020/04/18/golang/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多同学用github管理我们的代码,下面介绍下怎么用github+drone搭建自己的持续集成服务</p>
<h2 id="申请oauth"><a href="#申请oauth" class="headerlink" title="申请oauth"></a>申请oauth</h2><p>因为我们需要依赖github的oauth服务,先申请一个Client Id和Client Secret:<br>申请页面位于github-&gt;setting-&gt;Developer settings-&gt;OAuth Apps<br><img src="https://upload-images.jianshu.io/upload_images/22774927-a73a71a41a689443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="申请oauth页面"><br>提交完毕,我们就可以得到Client Id和Client Secret:<br><img src="https://upload-images.jianshu.io/upload_images/22774927-d3ae094458479a2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="申请结果页"></p>
<h2 id="编写docker-compose"><a href="#编写docker-compose" class="headerlink" title="编写docker-compose"></a>编写docker-compose</h2><p>接下来创建一个docker-compose.yml文件内容如下:</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'2'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">drone-server</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> drone/drone<span class="token punctuation">:</span><span class="token number">1</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> drone<span class="token punctuation">-</span>server
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">'10081:80'</span>      <span class="token comment" spellcheck="true"># Web管理面板的入口 PROTO=http  时使用该端口</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock   <span class="token comment" spellcheck="true"># docker.sock [1]</span>
      <span class="token punctuation">-</span> /var/data/drone/<span class="token punctuation">:</span>/var/lib/drone             <span class="token comment" spellcheck="true"># drone数据存放路径</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> DRONE_GITHUB_CLIENT_ID=$<span class="token punctuation">{</span>DRONE_GITHUB_CLIENT_ID<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#上面申请的github CLIENT_ID</span>
      <span class="token punctuation">-</span> DRONE_GITHUB_CLIENT_SECRET=$<span class="token punctuation">{</span>DRONE_GITHUB_CLIENT_SECRET<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#上面申请的github CLIENT_SECRET</span>
      <span class="token punctuation">-</span> DRONE_RPC_SECRET=$<span class="token punctuation">{</span>DRONE_RPC_SECRET<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">#你的密钥MD5值即可</span>
      <span class="token punctuation">-</span> DRONE_SERVER_HOST=你的IP<span class="token punctuation">:</span><span class="token number">10081</span>
      <span class="token punctuation">-</span> DRONE_SERVER_PROTO=$<span class="token punctuation">{</span>DRONE_SERVER_PROTO<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#http 或 https  </span>
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
  <span class="token key atrule">drone-agent</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> drone/drone<span class="token punctuation">-</span>runner<span class="token punctuation">-</span>docker<span class="token punctuation">:</span><span class="token number">1</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> drone<span class="token punctuation">-</span>runner
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> drone<span class="token punctuation">-</span>server
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock <span class="token comment" spellcheck="true"># docker.sock [1]</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> DRONE_RPC_PROTO=$<span class="token punctuation">{</span>DRONE_SERVER_PROTO<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#http 或 https</span>
      <span class="token punctuation">-</span> DRONE_RPC_HOST=你的IP<span class="token punctuation">:</span><span class="token number">10081</span>
      <span class="token punctuation">-</span> DRONE_RPC_SECRET=$<span class="token punctuation">{</span>DRONE_RPC_SECRET<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#你的密钥MD5值即可,跟上面的保持一致</span>
      <span class="token punctuation">-</span> DRONE_RUNNER_CAPACITY=2 <span class="token comment" spellcheck="true">#最多同时运行几个</span>
      <span class="token punctuation">-</span> DRONE_RUNNER_NAME=你的IP
      <span class="token punctuation">-</span> TZ=Asia/Shanghai
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当前目录下执行docker-compose up -d就可以启动了.<br><img src="https://upload-images.jianshu.io/upload_images/22774927-ff15ddc62e6c03a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动docker-compose"><br>访问我们的主页你的ip:10081,效果如图<br><img src="https://upload-images.jianshu.io/upload_images/22774927-fb4254c911fe9823.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目列表"><br><img src="https://upload-images.jianshu.io/upload_images/22774927-7548f78948808524.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置信息"></p>
<h2 id="编写-drone-yml"><a href="#编写-drone-yml" class="headerlink" title="编写.drone.yml"></a>编写.drone.yml</h2><p>上图可以看到需要开启自动集成的项目还需要编写.drone.yml文件</p>
<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">kind</span><span class="token punctuation">:</span> pipeline
<span class="token key atrule">type</span><span class="token punctuation">:</span> docker
<span class="token key atrule">name</span><span class="token punctuation">:</span> api<span class="token punctuation">-</span>ui
<span class="token key atrule">workspace</span><span class="token punctuation">:</span>
  <span class="token key atrule">base</span><span class="token punctuation">:</span> /data/service
  <span class="token key atrule">path</span><span class="token punctuation">:</span> .
<span class="token key atrule">steps</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 部署api<span class="token punctuation">-</span>ui项目
  <span class="token key atrule">image</span><span class="token punctuation">:</span> appleboy/drone<span class="token punctuation">-</span>ssh
  <span class="token key atrule">settings</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span>
      <span class="token key atrule">from_secret</span><span class="token punctuation">:</span> host
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">22</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span>
      <span class="token key atrule">from_secret</span><span class="token punctuation">:</span> ssh_name
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
      <span class="token key atrule">from_secret</span><span class="token punctuation">:</span> ssh_passwd
    <span class="token key atrule">script</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> cd /home/xxxxxx/www/api<span class="token punctuation">-</span>ui/
      <span class="token punctuation">-</span> pwd &amp;&amp; ls <span class="token punctuation">-</span>l
      <span class="token punctuation">-</span> git pull origin master
      <span class="token punctuation">-</span> rm <span class="token punctuation">-</span>rf dist/*
      <span class="token punctuation">-</span> cnpm run build
      <span class="token punctuation">-</span> pwd &amp;&amp; ls <span class="token punctuation">-</span>l
      <span class="token punctuation">-</span> docker build <span class="token punctuation">-</span>t api<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>v1 .
      <span class="token punctuation">-</span> docker rm <span class="token punctuation">-</span>f api<span class="token punctuation">-</span>ui <span class="token punctuation">|</span><span class="token punctuation">|</span> true
      <span class="token punctuation">-</span> docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span><span class="token punctuation">-</span>rm <span class="token punctuation">-</span><span class="token punctuation">-</span>name api<span class="token punctuation">-</span>ui <span class="token punctuation">-</span>p 80<span class="token punctuation">:</span>80 api<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的from_secret后面的值可以在我们的setting页面添加<br><img src="https://upload-images.jianshu.io/upload_images/22774927-9196b5e02ca7cf6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="加密内容"><br>设置完毕,我们后续提交代码的时候就会自动同步到我们的服务器了,是不是很方便呢<br><img src="https://upload-images.jianshu.io/upload_images/22774927-06e27c220914bc27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>drone</tag>
      </tags>
  </entry>
  <entry>
    <title>golang实现一个简单的webserver</title>
    <url>/2020/04/21/golang-web-server/</url>
    <content><![CDATA[<h2 id="官网DEMO"><a href="#官网DEMO" class="headerlink" title="官网DEMO"></a>官网DEMO</h2><blockquote>
<p>先上一个官网的示例<br>简单几行代码即可实现一个webserver</p>
</blockquote>
<pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"io"</span>
    <span class="token string">"log"</span>
    <span class="token string">"net/http"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Hello world, the web server</span>

    helloHandler <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Hello, world!\n"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> helloHandler<span class="token punctuation">)</span>
    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h2><blockquote>
<p>进阶版我们封装了以下功能</p>
<ul>
<li>用一个gin框架</li>
<li>实现一个route</li>
<li>实现controller</li>
<li>实现一个中间件</li>
<li>加一个单测<br>代码如下</li>
</ul>
</blockquote>
<pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">//main.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    routes <span class="token string">"api/routes"</span>

    <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    route <span class="token operator">:=</span> routes<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    route<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//单测示例,其实并没用</span>
<span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"hello"</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// routes/route.go</span>
<span class="token keyword">package</span> routes

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    c <span class="token string">"api/controller"</span>
    m <span class="token string">"api/middleware"</span>

    <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Router</span><span class="token punctuation">(</span>r <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>
    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//路由组,很方便</span>
    v1 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v1"</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//访问地址 http://hostname/v1/hello</span>
        v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Hello<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> r
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// controller/hello.go</span>
<span class="token keyword">package</span> controller

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Hello <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Text  <span class="token builtin">string</span> <span class="token string">`json:"text"`</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//golang 的方法首字母大写表示public修饰符</span>
<span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">:=</span> Hello<span class="token punctuation">{</span>
        text<span class="token punctuation">:</span> <span class="token string">"hello word"</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//返回json信息</span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
        <span class="token string">"data"</span><span class="token punctuation">:</span> data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// middleware/header.go</span>
<span class="token keyword">package</span> middleware

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"github.com/gin-gonic/gin"</span>
<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">//简单的跨域中间件</span>
<span class="token keyword">func</span> <span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// gin设置响应头，设置跨域</span>
        c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>
        c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"POST, GET, OPTIONS, PUT, DELETE"</span><span class="token punctuation">)</span>
        c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Action, Module, X-PINGOTHER, Content-Type, Content-Disposition"</span><span class="token punctuation">)</span>
        c<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>
        c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// main_test.go 单测示例</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"testing"</span>

<span class="token keyword">func</span> <span class="token function">TestHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"hello"</span> <span class="token punctuation">{</span>
        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Testing error"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>好了,一个简单的webserver就搞定了<br>所有示例都是go module模式下的,不会的同学可以看我其他文章有介绍</p>
</blockquote>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>老项目加入golang mod模式</title>
    <url>/2020/04/18/old-add-golang-mod/</url>
    <content><![CDATA[<h2 id="老项目如何迁移至mod"><a href="#老项目如何迁移至mod" class="headerlink" title="老项目如何迁移至mod"></a>老项目如何迁移至mod</h2><p>现在我们有一个老项目test,结构如下<br><img src="https://upload-images.jianshu.io/upload_images/22774927-c978a805c84d703e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构"><br>很显然这不是一个mod项目,下面我们将演示如何将它转变为mod</p>
<h2 id="初始化mod"><a href="#初始化mod" class="headerlink" title="初始化mod"></a>初始化mod</h2><p>在我的项目test目录下执行go mod init test (注意:test改成你自己的项目名称即可)<br><img src="https://upload-images.jianshu.io/upload_images/22774927-037a99896a1277e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化mod"><br>如上图,我们的项目目录下就会生成go.mod文件,内容如下</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://upload-images.jianshu.io/upload_images/22774927-1ced8fa28b5e52e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="go mod内容"><br>现在我们就将项目加入mod模式了</p>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>php项目中使用composer</title>
    <url>/2020/04/30/php-use-composer/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>需已安装composer,未安装的请自行百度</p>
</blockquote>
<h2 id="编写composer"><a href="#编写composer" class="headerlink" title="编写composer"></a>编写composer</h2><blockquote>
<p>编写composer.json 引入monolog处理日志<br>这里由于我使用的php7.0x,所以引用的monolog-1.x版本的,版本2.x需要php7.2,按需选择即可</p>
</blockquote>
<pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>
    <span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"monolog/monolog"</span><span class="token operator">:</span> <span class="token string">"1.*"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"repositories"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>保存composer.json文件<br>执行composer install<br>结果如下</p>
</blockquote>
<pre><code>Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 1 install, 0 updates, 0 removals
  - Installing monolog/monolog (1.25.3): Downloading (100%)</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote>
<p>编写index.php</p>
</blockquote>
<pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">require</span> <span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/../vendor/autoload.php'</span><span class="token punctuation">;</span>


<span class="token keyword">use</span> <span class="token package">Monolog<span class="token punctuation">\</span>Logger</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Monolog<span class="token punctuation">\</span>Handler<span class="token punctuation">\</span>StreamHandler</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Monolog<span class="token punctuation">\</span>Handler<span class="token punctuation">\</span>FirePHPHandler</span><span class="token punctuation">;</span>

<span class="token variable">$logger</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token string">'test_logger'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$logger</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushHandler</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">StreamHandler</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">.</span><span class="token string">'/../log/test.log'</span><span class="token punctuation">,</span> Logger<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$logger</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FirePHPHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$logger</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'hello log!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>大家可以看一看自己的日志是不是记下来了呢<br>有其他问题记得联系我</p>
</blockquote>
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>pre-commit 使用备忘</title>
    <url>/2021/01/08/pre-commit-mark/</url>
    <content><![CDATA[<h1 id="php篇"><a href="#php篇" class="headerlink" title="php篇"></a>php篇</h1><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><table>
<thead>
<tr>
<th>文件名</th>
<th>.pre-commit-config.yaml</th>
</tr>
</thead>
<tbody><tr>
<td>路径</td>
<td>cd $HOME</td>
</tr>
</tbody></table>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">repos</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/pre<span class="token punctuation">-</span>commit/pre<span class="token punctuation">-</span>commit<span class="token punctuation">-</span>hooks
   <span class="token key atrule">rev</span><span class="token punctuation">:</span> v3.4.0
   <span class="token key atrule">hooks</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> check<span class="token punctuation">-</span>yaml
   <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> check<span class="token punctuation">-</span>json
 <span class="token punctuation">-</span> <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/digitalpulp/pre<span class="token punctuation">-</span>commit<span class="token punctuation">-</span>php.git
   <span class="token key atrule">rev</span><span class="token punctuation">:</span> 1.4.0
   <span class="token key atrule">hooks</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> php<span class="token punctuation">-</span>lint<span class="token punctuation">-</span>all
     <span class="token key atrule">files</span><span class="token punctuation">:</span> \.(php)$
 <span class="token punctuation">-</span> <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitlab.com/PyCQA/flake8
   <span class="token key atrule">rev</span><span class="token punctuation">:</span> 3.8.4
   <span class="token key atrule">hooks</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> flake8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置alias"><a href="#配置alias" class="headerlink" title="配置alias"></a>配置alias</h3><blockquote>
<p>alias pre=”pre-commit run –config ${HOME}/.pre-commit-config.yaml”</p>
</blockquote>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#将修改添加到暂存区</span>
<span class="token function">git</span> add <span class="token keyword">.</span>
<span class="token comment" spellcheck="true">#执行校验该步骤将会执行hook</span>
pre
<span class="token comment" spellcheck="true">#校验通过再进行commit</span>
<span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h3><p>参考文档：<a href="https://pre-commit.com/" target="_blank" rel="noopener">pre-commit</a></p>
<!-- 标记 -->
]]></content>
      <categories>
        <category>技术文章</category>
      </categories>
      <tags>
        <tag>pre-commit</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode必备扩展介绍</title>
    <url>/2020/04/19/vscode-ext-info/</url>
    <content><![CDATA[<h2 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h2><p>中文语言菜单，不多说，你懂的</p>
<h2 id="GitLens-—-Git-supercharged"><a href="#GitLens-—-Git-supercharged" class="headerlink" title="GitLens — Git supercharged"></a>GitLens — Git supercharged</h2><p>git工具</p>
<h2 id="remote-Develop"><a href="#remote-Develop" class="headerlink" title="remote Develop"></a>remote Develop</h2><p>微软出品，远程开发利器</p>
<h2 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h2><p>同步vscode设置到远程，一键同步远程设置</p>
<h2 id="Better-Align"><a href="#Better-Align" class="headerlink" title="Better Align"></a>Better Align</h2><p>格式化代码神器</p>
<h2 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h2><p>个性化图标</p>
<h2 id="Markdown-Preview"><a href="#Markdown-Preview" class="headerlink" title="Markdown Preview"></a>Markdown Preview</h2><p>写Markdown神器，所见即所得</p>
<h2 id="Sftp"><a href="#Sftp" class="headerlink" title="Sftp"></a>Sftp</h2><p>Sftp工具，喜欢ftp的同学有福了</p>
<h2 id="PHP-DocBlocker"><a href="#PHP-DocBlocker" class="headerlink" title="PHP DocBlocker"></a>PHP DocBlocker</h2><p>一键生成注释，注释党必备</p>
<blockquote>
<p>其他<br>…后续再补</p>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
</search>
